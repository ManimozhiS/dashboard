{"ast":null,"code":"var _jsxFileName = \"/home/manimozhi/Desktop/board/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"../node_modules/react-vis/dist/style.css\"; //import Connection from './Components/Connection.js';\n\nimport Connection1 from './Connection1.js';\nimport Connection from './Connection.js';\nimport Connection2 from './Connection2.js';\nimport axios from \"axios\"; //import D3FlareData from '../datasets/d3-flare-example.json';\n\nimport \"./App.css\"; //import Home from \"./Home\";\n\nimport Header from \"./Header\";\nimport { Hint, XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, VerticalBarSeries, HorizontalBarSeries, HeatmapSeries, RadialChart } from \"react-vis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Connection11 = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({});\n  const [i_b, seti_b] = useState([]);\n  const [v_bc, setv_bc] = useState([]);\n\n  const chart = () => {\n    let current2 = [];\n    let voltage2 = [];\n    axios.get(\"http://localhost:3000/register_values_em6400\").then(res => {\n      console.log(res);\n\n      for (const dataObj of res.data) {\n        current2.push(parseInt(dataObj.i_b));\n        voltage2.push(parseInt(dataObj.v_bc));\n      }\n\n      setChartData({\n        labels: voltage2,\n        datasets: [{\n          label: \"voltage vs current\",\n          data: current2,\n          backgroundColor: [\"rgba(75, 19, 192, 0.6)\"],\n          borderWidth: 4\n        }]\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    console.log(current2, voltage2);\n  }; // useEffect(() => {\n  //   chart();\n  // }, []);\n\n}; // all imports are over by here\n\n\n_s(Connection11, \"wvPGZ8fPjiotKEHHc7sXS1/SQa0=\");\n\n_c = Connection11;\n\nclass App extends Component {\n  constructor(...args) {\n    var _s2 = $RefreshSig$();\n\n    super(...args);\n    this.state = {\n      value: false,\n      data: []\n    };\n    this.Connection11 = _s2(() => {\n      _s2();\n\n      const chart = () => {\n        axios.get(\"http://localhost:3000/register_values_em6400\").then(res => {\n          console.log(res);\n          let data1 = [];\n\n          for (const dataObj of res.data) {\n            let temp = {\n              x: \"\",\n              y: \"\"\n            };\n            temp.x = parseInt(dataObj.i_b);\n            temp.y = parseInt(dataObj.v_bc);\n            data1.push(temp);\n          }\n\n          ;\n          this.setState({\n            data: data1,\n            value: false\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      };\n\n      useEffect(() => {\n        chart();\n      }, []);\n    }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  }\n\n  render() {\n    const {\n      value\n    } = this.state;\n    const myData = [{\n      angle: 1\n    }, {\n      angle: 5\n    }, {\n      angle: 2\n    }]; // //const data = [\n    //   // { x: 1, y: 0, color: 10 },\n    //   { x: 1, y: 5, color: 10 },\n    //   { x: 1, y: 10, color: 6 },\n    //   { x: 1, y: 15, color: 7 },\n    //   { x: 2, y: 0, color: 12 },\n    //   { x: 2, y: 5, color: 2 },\n    //   { x: 2, y: 10, color: 1 },\n    //   { x: 2, y: 15, color: 12 },\n    //   { x: 3, y: 0, color: 9 },\n    //   { x: 3, y: 5, color: 2 },\n    //   { x: 3, y: 10, color: 6 },\n    //   { x: 3, y: 15, color: 12 },\n    // ];\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      style: {\n        backgroundColor: \"\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XYPlot, {\n              height: 300,\n              width: 700,\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(LineSeries, {\n                data: this.state.data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XYPlot, {\n              height: 300,\n              width: 700,\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(VerticalBarSeries, {\n                data: this.state.data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XYPlot, {\n              height: 300,\n              width: 700,\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalBarSeries, {\n                data: this.state.data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RadialChart, {\n              data: myData,\n              width: 400,\n              height: 400\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Connection1, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Connection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Connection2, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connection11\");","map":{"version":3,"sources":["/home/manimozhi/Desktop/board/client/src/App.js"],"names":["React","Component","useEffect","useState","BrowserRouter","Router","Route","Switch","Connection1","Connection","Connection2","axios","Header","Hint","XYPlot","LineSeries","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","VerticalBarSeries","HorizontalBarSeries","HeatmapSeries","RadialChart","Connection11","chartData","setChartData","i_b","seti_b","v_bc","setv_bc","chart","current2","voltage2","get","then","res","console","log","dataObj","data","push","parseInt","labels","datasets","label","backgroundColor","borderWidth","catch","err","App","state","value","data1","temp","x","y","setState","render","myData","angle"],"mappings":"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","sourcesContent":["import React, { Component,useEffect,useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"../node_modules/react-vis/dist/style.css\";\n//import Connection from './Components/Connection.js';\nimport Connection1 from './Connection1.js';\nimport Connection from './Connection.js';\nimport Connection2 from './Connection2.js';\nimport axios from \"axios\";\n\n\n\n//import D3FlareData from '../datasets/d3-flare-example.json';\nimport \"./App.css\";\n//import Home from \"./Home\";\nimport Header from \"./Header\";\nimport {\n  Hint,\n  XYPlot,\n  LineSeries,\n  VerticalGridLines,\n  HorizontalGridLines,\n  XAxis,\n  YAxis,\n  VerticalBarSeries,\n  HorizontalBarSeries,\n  HeatmapSeries,\n  RadialChart,\n  \n} from \"react-vis\";\n\nconst Connection11 = () => {\n  \n  const [chartData, setChartData] = useState({});\n  const [i_b, seti_b] = useState([]);\n  const [v_bc, setv_bc] = useState([]);\n\n  const chart = () => {\n    let current2 = [];\n    let voltage2 = [];\n    axios\n      .get(\"http://localhost:3000/register_values_em6400\")\n      .then(res => {\n        console.log(res);\n        for (const dataObj of res.data) {\n          current2.push(parseInt(dataObj.i_b));\n          voltage2.push(parseInt(dataObj.v_bc));\n        }\n        setChartData({\n          labels: voltage2,\n          datasets: [\n            {\n              label: \"voltage vs current\",\n              data: current2,\n              backgroundColor: [\"rgba(75, 19, 192, 0.6)\"],\n              borderWidth: 4\n            }\n          ]\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    console.log(current2, voltage2);\n  };\n\n  // useEffect(() => {\n  //   chart();\n  // }, []);\n}\n\n// all imports are over by here\n\n\nclass App extends Component {\n\n    state = {\n    value:false,\n    data : []\n  };\n\n   Connection11 = () => {\n  \n  \n  \n    const chart = () => {\n      \n      axios\n        .get(\"http://localhost:3000/register_values_em6400\")\n        .then(res => {\n          console.log(res);\n          let data1=[];\n          for (const dataObj of res.data) {\n            let temp = {x:\"\",y:\"\"}\n            temp.x= parseInt(dataObj.i_b);\n            temp.y = parseInt(dataObj.v_bc);\n            data1.push(temp);\n          };\n          this.setState({data:data1,value:false});\n          \n        })\n        .catch(err => {\n          console.log(err);\n        });\n      \n    };\n  \n    useEffect(() => {\n      chart();\n    }, []);}\n  \n\n  render() {\n    const { value } = this.state;\n    const myData = [{ angle: 1 }, { angle: 5 }, { angle: 2 }];\n    \n    // //const data = [\n    //   // { x: 1, y: 0, color: 10 },\n    //   { x: 1, y: 5, color: 10 },\n    //   { x: 1, y: 10, color: 6 },\n    //   { x: 1, y: 15, color: 7 },\n    //   { x: 2, y: 0, color: 12 },\n    //   { x: 2, y: 5, color: 2 },\n    //   { x: 2, y: 10, color: 1 },\n    //   { x: 2, y: 15, color: 12 },\n    //   { x: 3, y: 0, color: 9 },\n    //   { x: 3, y: 5, color: 2 },\n    //   { x: 3, y: 10, color: 6 },\n    //   { x: 3, y: 15, color: 12 },\n    // ];\n   \n  \n    return (\n      <div className=\"App\" style={{ backgroundColor: \"\" }}>\n        <Router>\n          <Switch>\n            <Route path=\"/\">\n              <Header />\n              <XYPlot height={300} width={700}>\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                <LineSeries data={this.state.data} />\n              </XYPlot>\n\n              <XYPlot height={300} width={700}>\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                <VerticalBarSeries data={this.state.data} />\n              </XYPlot>\n\n              <XYPlot height={300} width={700}>\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                <HorizontalBarSeries data={this.state.data} />\n              </XYPlot>\n\n              {/* <XYPlot height={400} width={700}>\n                <XAxis />\n                <YAxis />\n                {}\n                <HeatmapSeries\n                  className=\"heatmap-series-example\"\n                  onValueMouseOver={(v) => this.setState({ value: v })}\n                  onSeriesMouseOut={(v) => this.setState({ value: false })}\n                  data={data}\n                />\n                {value !== false && <Hint value={value} />}\n              </XYPlot> */}\n\n              <RadialChart data={myData} width={400} height={400} />\n              \n              <Connection1 />\n              <Connection />\n              <Connection2 />\n            \n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}