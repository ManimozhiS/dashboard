{"ast":null,"code":"var _jsxFileName = \"/home/manimozhi/Desktop/board/client/src/displaygraphs/Powerfactor_vs_timestamp.js\",\n    _s = $RefreshSig$();\n\n//powerfactor vs time - pf_a,pf_b,pf_c,pf_total vs time\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Powerfactor_vs_timestamp = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({});\n\n  const chart = () => {\n    let pf_a = [];\n    let pf_b = [];\n    let pf_c = [];\n    let pf_tot = [];\n    let timestamp = [];\n    axios.get(\"\").then(res => {\n      //console.log(res);\n      for (const dataObj of res.data) {\n        pf_a.push(parseInt(dataObj.pf_a));\n        pf_b.push(parseInt(dataObj.pf_b));\n        pf_c.push(parseInt(dataObj.pf_c));\n        pf_tot.push(parseInt(dataObj.pf_tot));\n        timestamp.push(dataObj.timestamp);\n      }\n\n      setChartData({\n        labels: timestamp,\n        datasets: [{\n          label: \"pf_a vs time\",\n          data: pf_a,\n          fill: false,\n          backgroundColor: \"rgba(75,192,192,1)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderWidth: 1\n        }, {\n          label: \"pf_b vs time\",\n          data: pf_b,\n          fill: false,\n          borderColor: \"orange\",\n          backgroundColor: \"orange\",\n          borderWidth: 1\n        }, {\n          label: \"pf_c vs time\",\n          data: pf_c,\n          fill: false,\n          borderColor: \"#742774\",\n          backgroundColor: \"#742774\",\n          borderWidth: 1\n        }, {\n          label: \"pf_tot vs time\",\n          data: pf_tot,\n          fill: false,\n          borderColor: \"green\",\n          backgroundColor: \"green\",\n          borderWidth: 1\n        }]\n      });\n    }).catch(err => {\n      console.log(err);\n    }); //console.log(current2, voltage2);\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"linechart2\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Powerfactor_vs_Timestamp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          title: {\n            text: \"THICCNESS SCALE\",\n            display: true\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                autoSkip: true,\n                maxTicksLimit: 10,\n                beginAtZero: true\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            xAxes: [{\n              gridLines: {\n                display: false\n              }\n            }]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Powerfactor_vs_timestamp, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n\n_c = Powerfactor_vs_timestamp;\nexport default Powerfactor_vs_timestamp;\n\nvar _c;\n\n$RefreshReg$(_c, \"Powerfactor_vs_timestamp\");","map":{"version":3,"sources":["/home/manimozhi/Desktop/board/client/src/displaygraphs/Powerfactor_vs_timestamp.js"],"names":["React","useState","useEffect","Line","axios","Powerfactor_vs_timestamp","chartData","setChartData","chart","pf_a","pf_b","pf_c","pf_tot","timestamp","get","then","res","dataObj","data","push","parseInt","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","catch","err","console","log","responsive","title","text","display","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes"],"mappings":"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","sourcesContent":["//powerfactor vs time - pf_a,pf_b,pf_c,pf_total vs time\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\nconst Powerfactor_vs_timestamp = () => {\n  \n  const [chartData, setChartData] = useState({});\n\n  const chart = () => {\n    let pf_a = [];\n    let pf_b = [];\n    let pf_c = [];\n    let pf_tot = [];\n    let timestamp = [];\n    axios\n      .get(\"\")\n      .then(res => {\n        //console.log(res);\n        for (const dataObj of res.data) {\n          pf_a.push(parseInt(dataObj.pf_a));\n          pf_b.push(parseInt(dataObj.pf_b));\n          pf_c.push(parseInt(dataObj.pf_c));\n          pf_tot.push(parseInt(dataObj.pf_tot))\n          timestamp.push(dataObj.timestamp);\n        }\n        setChartData({\n          labels:timestamp,\n          datasets: [\n            {\n              label: \"pf_a vs time\",\n              data: pf_a,\n              fill: false,\n              backgroundColor: \"rgba(75,192,192,1)\",\n              borderColor: \"rgba(75,192,192,1)\",\n              borderWidth: 1\n            },\n            {\n              label: \"pf_b vs time\",\n              data: pf_b,\n              fill:false,\n              borderColor:\"orange\",\n              backgroundColor:\"orange\",\n              borderWidth: 1\n            },\n            {\n              label: \"pf_c vs time\",\n              data: pf_c,\n              fill:false,\n              borderColor: \"#742774\",\n              backgroundColor: \"#742774\",\n              borderWidth: 1\n            },\n            {\n              label: \"pf_tot vs time\",\n              data: pf_tot,\n              fill:false,\n              borderColor:\"green\",\n              backgroundColor:\"green\",\n              borderWidth: 1\n            }\n          ]\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    //console.log(current2, voltage2);\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return (\n    <div className=\"linechart2\">\n      <h1>Powerfactor_vs_Timestamp</h1>\n      <div>\n        <Line data={chartData}\n          options={{\n            responsive: true,\n            title: { text: \"THICCNESS SCALE\", display: true },\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10,\n                    beginAtZero: true\n                  },\n                  gridLines: {\n                    display: false\n                  }\n                }\n              ],\n              xAxes: [\n                {\n                  gridLines: {\n                    display: false\n                  }\n                }\n              ]\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Powerfactor_vs_timestamp;"]},"metadata":{},"sourceType":"module"}