{"ast":null,"code":"var _jsxFileName = \"/home/manimozhi/Desktop/board/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"../node_modules/react-vis/dist/style.css\";\nimport { Button } from '@material-ui/core'; //import D3FlareData from '../datasets/d3-flare-example.json';\n\nimport \"./App.css\"; //import Home from \"./Home\";\n\nimport Header from \"./Header\";\nimport { Hint, XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, VerticalBarSeries, HorizontalBarSeries, HeatmapSeries, RadialChart, Treemap } from \"react-vis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MODE = [\"circlePack\", \"partition\", \"partition-pivot\", \"squarify\", \"resquarify\", \"slice\", \"dice\", \"slicedice\", \"binary\"];\nconst STYLES = {\n  SVG: {\n    stroke: \"#ddd\",\n    strokeWidth: \"0.25\",\n    strokeOpacity: 0.5\n  },\n  DOM: {\n    border: \"thin solid #ddd\"\n  }\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state1 = {\n      modeIndex: 0,\n      useSVG: true\n    };\n    this.state = {\n      value: false\n    };\n\n    this.updateModeIndex = increment => () => {\n      const newIndex = this.state.modeIndex + (increment ? 1 : -1);\n      const modeIndex = newIndex < 0 ? MODE.length - 1 : newIndex >= MODE.length ? 0 : newIndex;\n      this.setState({\n        modeIndex\n      });\n    };\n  }\n\n  render() {\n    const {\n      value\n    } = this.state;\n    const myData = [{\n      angle: 1\n    }, {\n      angle: 5\n    }, {\n      angle: 2\n    }];\n    const {\n      modeIndex,\n      useSVG\n    } = this.state;\n    const data = [{\n      x: 1,\n      y: 0,\n      color: 10\n    }, {\n      x: 1,\n      y: 5,\n      color: 10\n    }, {\n      x: 1,\n      y: 10,\n      color: 6\n    }, {\n      x: 1,\n      y: 15,\n      color: 7\n    }, {\n      x: 2,\n      y: 0,\n      color: 12\n    }, {\n      x: 2,\n      y: 5,\n      color: 2\n    }, {\n      x: 2,\n      y: 10,\n      color: 1\n    }, {\n      x: 2,\n      y: 15,\n      color: 12\n    }, {\n      x: 3,\n      y: 0,\n      color: 9\n    }, {\n      x: 3,\n      y: 5,\n      color: 2\n    }, {\n      x: 3,\n      y: 10,\n      color: 6\n    }, {\n      x: 3,\n      y: 15,\n      color: 12\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      style: {\n        backgroundColor: \"\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XYPlot, {\n              height: 300,\n              width: 700,\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(LineSeries, {\n                data: data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XYPlot, {\n              height: 300,\n              width: 700,\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(VerticalBarSeries, {\n                data: data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XYPlot, {\n              height: 300,\n              width: 700,\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalBarSeries, {\n                data: data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XYPlot, {\n              height: 400,\n              width: 700,\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(HeatmapSeries, {\n                className: \"heatmap-series-example\",\n                onValueMouseOver: v => this.setState({\n                  value: v\n                }),\n                onSeriesMouseOut: v => this.setState({\n                  value: false\n                }),\n                data: data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this), value !== false && /*#__PURE__*/_jsxDEV(Hint, {\n                value: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RadialChart, {\n              data: myData,\n              width: 400,\n              height: 400\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"centered-and-flexed\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"centered-and-flexed-controls\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => this.setState({\n                    useSVG: !useSVG\n                  }),\n                  buttonContent: useSVG ? \"USE DOM\" : \"USE SVG\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"centered-and-flexed-controls\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  onClick: this.updateModeIndex(false),\n                  buttonContent: \"PREV MODE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: MODE[modeIndex]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: this.updateModeIndex(true),\n                  buttonContent: \"NEXT MODE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Treemap, {\n                Animation: true,\n                className: \"nested-tree-example\",\n                colorType: \"literal\",\n                colorRange: [\"#88572C\"],\n                data: daa,\n                mode: MODE[modeIndex],\n                renderMode: useSVG ? \"SVG\" : \"DOM\",\n                height: 300,\n                width: 350,\n                margin: 10,\n                getSize: d => d.value,\n                getColor: d => d.hex,\n                style: STYLES[useSVG ? \"SVG\" : \"DOM\"]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/manimozhi/Desktop/board/client/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","Button","Header","Hint","XYPlot","LineSeries","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","VerticalBarSeries","HorizontalBarSeries","HeatmapSeries","RadialChart","Treemap","MODE","STYLES","SVG","stroke","strokeWidth","strokeOpacity","DOM","border","App","state1","modeIndex","useSVG","state","value","updateModeIndex","increment","newIndex","length","setState","render","myData","angle","data","x","y","color","backgroundColor","v","Animation","className","colorType","colorRange","daa","mode","renderMode","height","width","margin","getSize","d","getColor","hex","style"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"../node_modules/react-vis/dist/style.css\";\nimport {Button} from '@material-ui/core';\n\n//import D3FlareData from '../datasets/d3-flare-example.json';\nimport \"./App.css\";\n//import Home from \"./Home\";\nimport Header from \"./Header\";\nimport {\n  Hint,\n  XYPlot,\n  LineSeries,\n  VerticalGridLines,\n  HorizontalGridLines,\n  XAxis,\n  YAxis,\n  VerticalBarSeries,\n  HorizontalBarSeries,\n  HeatmapSeries,\n  RadialChart,\n  Treemap,\n} from \"react-vis\";\nconst MODE = [\n  \"circlePack\",\n  \"partition\",\n  \"partition-pivot\",\n  \"squarify\",\n  \"resquarify\",\n  \"slice\",\n  \"dice\",\n  \"slicedice\",\n  \"binary\",\n];\n\nconst STYLES = {\n  SVG: {\n    stroke: \"#ddd\",\n    strokeWidth: \"0.25\",\n    strokeOpacity: 0.5,\n  },\n  DOM: {\n    border: \"thin solid #ddd\",\n  },\n};\n\nclass App extends Component {\n  state1 = {\n    modeIndex: 0,\n    useSVG: true,\n  };\n  state = {\n    value: false,\n  };\n\n  updateModeIndex = (increment) => () => {\n    const newIndex = this.state.modeIndex + (increment ? 1 : -1);\n    const modeIndex =\n      newIndex < 0 ? MODE.length - 1 : newIndex >= MODE.length ? 0 : newIndex;\n    this.setState({ modeIndex });\n  };\n  render() {\n    const { value } = this.state;\n    const myData = [{ angle: 1 }, { angle: 5 }, { angle: 2 }];\n    const { modeIndex, useSVG } = this.state;\n    const data = [\n      { x: 1, y: 0, color: 10 },\n      { x: 1, y: 5, color: 10 },\n      { x: 1, y: 10, color: 6 },\n      { x: 1, y: 15, color: 7 },\n      { x: 2, y: 0, color: 12 },\n      { x: 2, y: 5, color: 2 },\n      { x: 2, y: 10, color: 1 },\n      { x: 2, y: 15, color: 12 },\n      { x: 3, y: 0, color: 9 },\n      { x: 3, y: 5, color: 2 },\n      { x: 3, y: 10, color: 6 },\n      { x: 3, y: 15, color: 12 },\n    ];\n    return (\n      <div className=\"App\" style={{ backgroundColor: \"\" }}>\n        <Router>\n          <Switch>\n            <Route path=\"/\">\n              <Header />\n              <XYPlot height={300} width={700}>\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                <LineSeries data={data} />\n              </XYPlot>\n\n              <XYPlot height={300} width={700}>\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                <VerticalBarSeries data={data} />\n              </XYPlot>\n\n              <XYPlot height={300} width={700}>\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                <HorizontalBarSeries data={data} />\n              </XYPlot>\n\n              <XYPlot height={400} width={700}>\n                <XAxis />\n                <YAxis />\n                <HeatmapSeries\n                  className=\"heatmap-series-example\"\n                  onValueMouseOver={(v) => this.setState({ value: v })}\n                  onSeriesMouseOut={(v) => this.setState({ value: false })}\n                  data={data}\n                />\n                {value !== false && <Hint value={value} />}\n              </XYPlot>\n\n              <RadialChart data={myData} width={400} height={400} />\n\n              <div className=\"centered-and-flexed\">\n                <div className=\"centered-and-flexed-controls\">\n                  <Button\n                    onClick={() => this.setState({ useSVG: !useSVG })}\n                    buttonContent={useSVG ? \"USE DOM\" : \"USE SVG\"}\n                  />\n                </div>\n                <div className=\"centered-and-flexed-controls\">\n                  <Button\n                    onClick={this.updateModeIndex(false)}\n                    buttonContent={\"PREV MODE\"}\n                  />\n                  <div>{MODE[modeIndex]}</div>\n                  <Button\n                    onClick={this.updateModeIndex(true)}\n                    buttonContent={\"NEXT MODE\"}\n                  />\n                </div>\n                <Treemap\n                  {...{\n                    Animation: true,\n                    className: \"nested-tree-example\",\n                    colorType: \"literal\",\n                    colorRange: [\"#88572C\"],\n                    data: daa,\n                    mode: MODE[modeIndex],\n                    renderMode: useSVG ? \"SVG\" : \"DOM\",\n                    height: 300,\n                    width: 350,\n                    margin: 10,\n                    getSize: (d) => d.value,\n                    getColor: (d) => d.hex,\n                    style: STYLES[useSVG ? \"SVG\" : \"DOM\"],\n                  }}\n                />\n              </div>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}