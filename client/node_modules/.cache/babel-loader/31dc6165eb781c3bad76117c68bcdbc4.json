{"ast":null,"code":"var _jsxFileName = \"/home/manimozhi/Desktop/board/client/src/displaygraphs/Current_vs_timestamp.js\",\n    _s = $RefreshSig$();\n\n//current_vs_timestamp- has graphs for i_a,i_b,i_c,i_avg vs timestamp\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport \"./timestamp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Current_vs_timestamp() {\n  _s();\n\n  const [chartData, setChartData] = useState({}); //const [i_b, seti_b] = useState([]);\n  //const [v_bc, setv_bc] = useState([]);\n\n  const chart = () => {\n    let current_a = [];\n    let current_b = [];\n    let current_c = [];\n    let current_n = [];\n    let timestamp = [];\n    axios.get(\"http://103.10.133.104:8081/auth/restricted/\").then(res => {\n      //console.log(res);\n      for (const dataObj of res.data) {\n        current_a.push(parseInt(dataObj.i_a));\n        current_b.push(parseInt(dataObj.i_b));\n        current_c.push(parseInt(dataObj.i_c));\n        current_n.push(parseInt(dataObj.i_avg));\n        if (dataOb) timestamp.push(dataObj.timestamp);\n      }\n\n      setChartData({\n        labels: timestamp,\n        scales: {\n          xAxes: [{\n            display: true,\n            gridLines: {\n              display: false\n            },\n            ticks: {\n              fontColor: 'red'\n            },\n            scaleLabel: {\n              display: true,\n              labelString: \"timestamp\",\n              fontColor: 'green'\n            }\n          }]\n        },\n        datasets: [{\n          label: \"i_a vs time\",\n          data: current_a,\n          fill: false,\n          backgroundColor: \"rgba(75,192,192,1)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderWidth: 1\n        }, {\n          label: \"i_b vs time\",\n          data: current_b,\n          fill: false,\n          borderColor: \"orange\",\n          backgroundColor: \"orange\",\n          borderWidth: 1\n        }, {\n          label: \"i_c vs time\",\n          data: current_c,\n          fill: false,\n          borderColor: \"#742774\",\n          backgroundColor: \"#742774\",\n          borderWidth: 1\n        }, {\n          label: \"i_avg vs time\",\n          data: current_n,\n          fill: false,\n          borderColor: \"green\",\n          backgroundColor: \"green\",\n          borderWidth: 1\n        }]\n      });\n    }).catch(err => {\n      console.log(err);\n    }); //console.log(current2, voltage2);\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Appline\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current_vs_Timestamp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          scales: {\n            yAxes: [{\n              display: true,\n              labelString: 'probability',\n              ticks: {\n                autoSkip: true,\n                maxTicksLimit: 10,\n                beginAtZero: true\n              },\n              gridLines: {\n                display: true\n              }\n            }],\n            xAxes: [{\n              gridLines: {\n                display: false\n              }\n            }]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Current_vs_timestamp, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n\n_c = Current_vs_timestamp;\nexport default Current_vs_timestamp;\n\nvar _c;\n\n$RefreshReg$(_c, \"Current_vs_timestamp\");","map":{"version":3,"sources":["/home/manimozhi/Desktop/board/client/src/displaygraphs/Current_vs_timestamp.js"],"names":["React","useState","useEffect","Line","axios","Current_vs_timestamp","chartData","setChartData","chart","current_a","current_b","current_c","current_n","timestamp","get","then","res","dataObj","data","push","parseInt","i_a","i_b","i_c","i_avg","dataOb","labels","scales","xAxes","display","gridLines","ticks","fontColor","scaleLabel","labelString","datasets","label","fill","backgroundColor","borderColor","borderWidth","catch","err","console","log","responsive","yAxes","autoSkip","maxTicksLimit","beginAtZero"],"mappings":"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","sourcesContent":["//current_vs_timestamp- has graphs for i_a,i_b,i_c,i_avg vs timestamp\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport \"./timestamp.css\";\n\nfunction Current_vs_timestamp() {\n\n  const [chartData, setChartData] = useState({});\n  //const [i_b, seti_b] = useState([]);\n  //const [v_bc, setv_bc] = useState([]);\n  const chart = () => {\n    let current_a = [];\n    let current_b = [];\n    let current_c = [];\n    let current_n = [];\n    let timestamp = [];\n    axios\n      .get(\"http://103.10.133.104:8081/auth/restricted/\")\n      .then(res => {\n        //console.log(res);\n        for (const dataObj of res.data) {\n          current_a.push(parseInt(dataObj.i_a));\n          current_b.push(parseInt(dataObj.i_b));\n          current_c.push(parseInt(dataObj.i_c));\n          current_n.push(parseInt(dataObj.i_avg));\n          if(dataOb)\n          timestamp.push(dataObj.timestamp);\n        }\n        setChartData({\n          labels: timestamp,\n          scales: {\n            xAxes: [{\n              display: true,\n              gridLines: {\n                display: false,\n              },\n              ticks: {\n                fontColor: 'red'\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"timestamp\",\n                fontColor: 'green'\n              }\n            }]\n          },\n          datasets: [\n            {\n              label: \"i_a vs time\",\n              data: current_a,\n              fill: false,\n              backgroundColor: \"rgba(75,192,192,1)\",\n              borderColor: \"rgba(75,192,192,1)\",\n              borderWidth: 1\n            },\n            {\n              label: \"i_b vs time\",\n              data: current_b,\n              fill: false,\n              borderColor: \"orange\",\n              backgroundColor: \"orange\",\n              borderWidth: 1\n            },\n            {\n              label: \"i_c vs time\",\n              data: current_c,\n              fill: false,\n              borderColor: \"#742774\",\n              backgroundColor: \"#742774\",\n              borderWidth: 1\n            },\n            {\n              label: \"i_avg vs time\",\n              data: current_n,\n              fill: false,\n              borderColor: \"green\",\n              backgroundColor: \"green\",\n              borderWidth: 1\n            }\n          ]\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    //console.log(current2, voltage2);\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return (\n    <div className=\"Appline\">\n      <h1>Current_vs_Timestamp</h1>\n      <div>\n        <Line data={chartData}\n\n          options={{\n            responsive: true,\n\n            scales: {\n              yAxes: [\n                {\n                  display: true,\n                  labelString: 'probability',\n\n                  ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10,\n                    beginAtZero: true\n                  },\n                  gridLines: {\n                    display: true\n                  }\n                }\n              ],\n              xAxes: [\n                {\n                  gridLines: {\n                    display: false\n                    \n                  }\n                }\n              ]\n            }\n          }} />\n      </div>\n    </div>\n  );\n}\n\nexport default Current_vs_timestamp;"]},"metadata":{},"sourceType":"module"}